/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
import java.util.Comparator;
import java.util.PriorityQueue;
public class Solution {
    public ListNode mergeKLists(ArrayList<ListNode> lists) {
        if(lists == null){
            return null;
        }
        if(lists.size() == 0){
            return null;
        }
        ListNode head = new ListNode(0), tail = head;
        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(lists.size(), 
                                                new Comparator<ListNode>(){
                                                    public int compare(ListNode l1, ListNode l2){
                                                        return l1.val - l2.val;
                                                    }
                                                });
        ListNode temp = null;
        for(int i = 0; i < lists.size();i++){
            temp = lists.get(i);
            if(temp != null){
                pq.add(temp);
            }
        }
        
        while(pq.size() != 0){
            temp = pq.poll();
            tail.next = temp;
            tail = tail.next;
            if(temp.next != null){
                pq.add(temp.next);
            }
        }
        
        return head.next;
    }
}