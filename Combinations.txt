public class Solution {
    ArrayList<ArrayList<Integer>> retval = new ArrayList<ArrayList<Integer>>();
    ArrayList<Integer> al = new ArrayList<Integer>();
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        if(k > n){
            return null;
        }
        combineRe(n, k, 1);
        return retval;
    }
    private void combineRe(int n, int k, int curr){
        if(k == 0 ){
            addToList();
            return;
        }
        if(n - curr + 1 < k){
            return;
        }
        for(int i = curr; i <= n; i++){
            al.add(new Integer(i));
            combineRe(n, k-1, i+1);
            al.remove(al.size()-1);
        }
    }
    private void addToList(){
        ArrayList<Integer> newSet = new ArrayList<Integer>();
        int temp;
        for(Integer i: al){
            temp = i;
            newSet.add(new Integer(temp));
        }
        retval.add(newSet);
    }
}